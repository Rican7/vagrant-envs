[opcache]
; Enable Zend OPcache extension module
zend_extension = opcache.so

; Determines if Zend OPCache is enabled
opcache.enable = <%= @options_hash['enable'] || 1 %>

; Determines if Zend OPCache is enabled for the CLI version of PHP
opcache.enable_cli = <%= @options_hash['enable_cli'] || 0 %>

; The OPcache shared memory storage size.
opcache.memory_consumption = <%= @options_hash['memory_consumption'] || 128 %>

; The amount of memory for interned strings in Mbytes.
opcache.interned_strings_buffer = <%= @options_hash['interned_strings_buffer'] || 8 %>

; The maximum number of keys (scripts) in the OPcache hash table.
; Only numbers between 200 and 100000 are allowed.
opcache.max_accelerated_files = <%= @options_hash['max_accelerated_files'] || 4000 %>

; The maximum percentage of "wasted" memory until a restart is scheduled.
opcache.max_wasted_percentage = <%= @options_hash['max_wasted_percentage'] || 5 %>

; When this directive is enabled, the OPcache appends the current working
; directory to the script key, thus eliminating possible collisions between
; files with the same name (basename). Disabling the directive improves
; performance, but may break existing applications.
opcache.use_cwd = <%= @options_hash['use_cwd'] || 1 %>

; When disabled, you must reset the OPcache manually or restart the
; webserver for changes to the filesystem to take effect.
opcache.validate_timestamps = <%= @options_hash['validate_timestamps'] || 1 %>

; How often (in seconds) to check file timestamps for changes to the shared
; memory storage allocation. ("1" means validate once per second, but only
; once per request. "0" means always validate)
opcache.revalidate_freq = <%= @options_hash['revalidate_freq'] || 2 %>

; Enables or disables file search in include_path optimization
opcache.revalidate_path = <%= @options_hash['revalidate_path'] || 0 %>

; If disabled, all PHPDoc comments are dropped from the code to reduce the
; size of the optimized code.
opcache.save_comments = <%= @options_hash['save_comments'] || 1 %>

; If disabled, PHPDoc comments are not loaded from SHM, so "Doc Comments"
; may be always stored (save_comments=1), but not loaded by applications
; that don't need them anyway.
opcache.load_comments = <%= @options_hash['load_comments'] || 1 %>

; If enabled, a fast shutdown sequence is used for the accelerated code
opcache.fast_shutdown = <%= @options_hash['fast_shutdown'] || 0 %>

; Allow file existence override (file_exists, etc.) performance feature.
opcache.enable_file_override = <%= @options_hash['enable_file_override'] || 0 %>

; A bitmask, where each bit enables or disables the appropriate OPcache
; passes
opcache.optimization_level = <%= @options_hash['optimization_level'] || '0xffffffff' %>

opcache.inherited_hack = <%= @options_hash['inherited_hack'] || 1 %>
opcache.dups_fix = <%= @options_hash['dups_fix'] || 0 %>

; The location of the OPcache blacklist file (wildcards allowed).
; Each OPcache blacklist file is a text file that holds the names of files
; that should not be accelerated. The file format is to add each filename
; to a new line. The filename may be a full path or just a file prefix
; (i.e., /var/www/x  blacklists all the files and directories in /var/www
; that start with 'x'). Line starting with a ; are ignored (comments).
;opcache.blacklist_filename=
<% if @options_hash['blacklist_filename'] %>
opcache.blacklist_filename = <%= @options_hash['blacklist_filename'] %>
<% end %>

; Allows exclusion of large files from being cached. By default all files
; are cached.
opcache.max_file_size = <%= @options_hash['max_file_size'] || 0 %>

; Check the cache checksum each N requests.
; The default value of "0" means that the checks are disabled.
opcache.consistency_checks = <%= @options_hash['consistency_checks'] || 0 %>

; How long to wait (in seconds) for a scheduled restart to begin if the cache
; is not being accessed.
opcache.force_restart_timeout = <%= @options_hash['force_restart_timeout'] || 180 %>

; OPcache error_log file name. Empty string assumes "stderr".
;opcache.error_log=
<% if @options_hash['error_log'] %>
opcache.error_log = <%= @options_hash['error_log'] %>
<% end %>

; All OPcache errors go to the Web server log.
; By default, only fatal errors (level 0) or errors (level 1) are logged.
; You can also enable warnings (level 2), info messages (level 3) or
; debug messages (level 4).
opcache.log_verbosity_level = <%= @options_hash['log_verbosity_level'] || 1 %>

; Preferred Shared Memory back-end. Leave empty and let the system decide.
;opcache.preferred_memory_model=
<% if @options_hash['preferred_memory_model'] %>
opcache.preferred_memory_model = <%= @options_hash['preferred_memory_model'] %>
<% end %>

; Protect the shared memory from unexpected writing during script execution.
; Useful for internal debugging only.
opcache.protect_memory = <%= @options_hash['protect_memory'] || 0 %>
